version: '3.8'

services:

# Application:

  app:
    command: app
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile
    restart: always
    env_file:
      - ./configs/.env
    environment:
      - GOMAXPROCS=4
      - GOMEMLIMIT=256MiB
      - GOGC=25
    ports:
      - "50051:50051"
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - kafka
    healthcheck:
      test: curl --silent --fail 0.0.0.0:$${HTTP_PORT}/live || exit 1
      interval: 10s
      timeout: 20s
      retries: 10

  postgres:
    image: postgres
    volumes:
      - db_volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: 'login'
      POSTGRES_PASSWORD: 'pass'
      POSTGRES_DB: 'app-db'
    ports:
      - '5432:5432'

  redis:
    image: redis:alpine
    ports:
      - '6379:6379'

  redis-ui:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"

# Kafka:

  kafka:
    image: bitnami/kafka:3.9
    ports:
      - '9092:9092'
      - '9094:9094'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: 'controller,broker'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '0@kafka:9093'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
    healthcheck:
      test: kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1
      interval: 10s
      timeout: 20s
      retries: 10

  kafka-init:
    image: bitnami/kafka:3.9
    env_file:
      - ./configs/.env
    command: >
      sh -c "
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic $${KAFKA_INPUT_TOPIC} &&
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic $${KAFKA_OUTPUT_TOPIC} "
    depends_on:
      kafka:
        condition: service_healthy

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - '8383:8383'
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - SERVER_PORT=8383
    depends_on:
      - kafka
    links:
      - kafka

# Observability:

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./configs/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana_volume:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
    ports:
      - '3000:3000'

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./configs/grafana/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - '9090:9090'

  #  tempo:
  #    image: grafana/tempo:latest
  #    command: [ "-config.file=/etc/tempo.yaml" ]
  #    volumes:
  #      - ./configs/grafana/tempo.yaml:/etc/tempo.yaml
  #    ports:
  #      - '3200:3200'  # tempo
  #      - '4317:4317'  # otlp grpc
  #      - '4318:4318'  # otlp http

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"  # web-ui
      - "4317:4317"    # otlp grpc - http://jaeger:4317/v1/traces
      - "4318:4318"    # otlp http - http://jaeger:4318/v1/traces
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true

volumes:
  grafana_volume:
  db_volume:
