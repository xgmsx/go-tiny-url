// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=mocks/contract.go
//

// Package mock_create is a generated GoMock package.
package mock_create

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "github.com/xgmsx/go-url-shortener-ddd/internal/domain/entity"
)

// Mockdatabase is a mock of database interface.
type Mockdatabase struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseMockRecorder
	isgomock struct{}
}

// MockdatabaseMockRecorder is the mock recorder for Mockdatabase.
type MockdatabaseMockRecorder struct {
	mock *Mockdatabase
}

// NewMockdatabase creates a new mock instance.
func NewMockdatabase(ctrl *gomock.Controller) *Mockdatabase {
	mock := &Mockdatabase{ctrl: ctrl}
	mock.recorder = &MockdatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdatabase) EXPECT() *MockdatabaseMockRecorder {
	return m.recorder
}

// CreateLink mocks base method.
func (m *Mockdatabase) CreateLink(arg0 context.Context, arg1 entity.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockdatabaseMockRecorder) CreateLink(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*Mockdatabase)(nil).CreateLink), arg0, arg1)
}

// Mockcache is a mock of cache interface.
type Mockcache struct {
	ctrl     *gomock.Controller
	recorder *MockcacheMockRecorder
	isgomock struct{}
}

// MockcacheMockRecorder is the mock recorder for Mockcache.
type MockcacheMockRecorder struct {
	mock *Mockcache
}

// NewMockcache creates a new mock instance.
func NewMockcache(ctrl *gomock.Controller) *Mockcache {
	mock := &Mockcache{ctrl: ctrl}
	mock.recorder = &MockcacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcache) EXPECT() *MockcacheMockRecorder {
	return m.recorder
}

// PutLink mocks base method.
func (m *Mockcache) PutLink(arg0 context.Context, arg1 entity.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutLink indicates an expected call of PutLink.
func (mr *MockcacheMockRecorder) PutLink(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLink", reflect.TypeOf((*Mockcache)(nil).PutLink), arg0, arg1)
}

// Mockpublisher is a mock of publisher interface.
type Mockpublisher struct {
	ctrl     *gomock.Controller
	recorder *MockpublisherMockRecorder
	isgomock struct{}
}

// MockpublisherMockRecorder is the mock recorder for Mockpublisher.
type MockpublisherMockRecorder struct {
	mock *Mockpublisher
}

// NewMockpublisher creates a new mock instance.
func NewMockpublisher(ctrl *gomock.Controller) *Mockpublisher {
	mock := &Mockpublisher{ctrl: ctrl}
	mock.recorder = &MockpublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpublisher) EXPECT() *MockpublisherMockRecorder {
	return m.recorder
}

// SendLink mocks base method.
func (m *Mockpublisher) SendLink(ctx context.Context, link entity.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLink", ctx, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLink indicates an expected call of SendLink.
func (mr *MockpublisherMockRecorder) SendLink(ctx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLink", reflect.TypeOf((*Mockpublisher)(nil).SendLink), ctx, link)
}
