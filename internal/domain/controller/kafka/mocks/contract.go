// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=mocks/contract.go
//

// Package mock_kafka is a generated GoMock package.
package mock_kafka

import (
	context "context"
	reflect "reflect"

	kafka "github.com/segmentio/kafka-go"
	gomock "go.uber.org/mock/gomock"
)

// MockkafkaReader is a mock of kafkaReader interface.
type MockkafkaReader struct {
	ctrl     *gomock.Controller
	recorder *MockkafkaReaderMockRecorder
	isgomock struct{}
}

// MockkafkaReaderMockRecorder is the mock recorder for MockkafkaReader.
type MockkafkaReaderMockRecorder struct {
	mock *MockkafkaReader
}

// NewMockkafkaReader creates a new mock instance.
func NewMockkafkaReader(ctrl *gomock.Controller) *MockkafkaReader {
	mock := &MockkafkaReader{ctrl: ctrl}
	mock.recorder = &MockkafkaReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkafkaReader) EXPECT() *MockkafkaReaderMockRecorder {
	return m.recorder
}

// CommitMessages mocks base method.
func (m *MockkafkaReader) CommitMessages(ctx context.Context, msgs ...kafka.Message) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitMessages indicates an expected call of CommitMessages.
func (mr *MockkafkaReaderMockRecorder) CommitMessages(ctx any, msgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitMessages", reflect.TypeOf((*MockkafkaReader)(nil).CommitMessages), varargs...)
}

// FetchMessage mocks base method.
func (m *MockkafkaReader) FetchMessage(ctx context.Context) (kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMessage", ctx)
	ret0, _ := ret[0].(kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMessage indicates an expected call of FetchMessage.
func (mr *MockkafkaReaderMockRecorder) FetchMessage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMessage", reflect.TypeOf((*MockkafkaReader)(nil).FetchMessage), ctx)
}
