// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=mocks/contract.go
//

// Package mock_main is a generated GoMock package.
package mock_main

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	config "github.com/xgmsx/go-url-shortener-ddd/internal/config"
)

// MockappRunner is a mock of appRunner interface.
type MockappRunner struct {
	ctrl     *gomock.Controller
	recorder *MockappRunnerMockRecorder
	isgomock struct{}
}

// MockappRunnerMockRecorder is the mock recorder for MockappRunner.
type MockappRunnerMockRecorder struct {
	mock *MockappRunner
}

// NewMockappRunner creates a new mock instance.
func NewMockappRunner(ctrl *gomock.Controller) *MockappRunner {
	mock := &MockappRunner{ctrl: ctrl}
	mock.recorder = &MockappRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappRunner) EXPECT() *MockappRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockappRunner) Run(ctx context.Context, c *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockappRunnerMockRecorder) Run(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockappRunner)(nil).Run), ctx, c)
}

// MockconfigLoader is a mock of configLoader interface.
type MockconfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockconfigLoaderMockRecorder
	isgomock struct{}
}

// MockconfigLoaderMockRecorder is the mock recorder for MockconfigLoader.
type MockconfigLoaderMockRecorder struct {
	mock *MockconfigLoader
}

// NewMockconfigLoader creates a new mock instance.
func NewMockconfigLoader(ctrl *gomock.Controller) *MockconfigLoader {
	mock := &MockconfigLoader{ctrl: ctrl}
	mock.recorder = &MockconfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconfigLoader) EXPECT() *MockconfigLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockconfigLoader) Load(ctx context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockconfigLoaderMockRecorder) Load(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockconfigLoader)(nil).Load), ctx)
}
